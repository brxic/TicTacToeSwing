Sure! Below is a **step-by-step tutorial** on how to **design the Tic-Tac-Toe form (`TicTacToe.form`)** using **NetBeans GUI Builder**. This will ensure that the UI is properly structured and linked to `TicTacToe.java`.

---

## 🎨 **Step 1: Open NetBeans and Create the Form**
1. **Open your TicTacToe project in NetBeans**.
2. **Right-click the `com.example.library` package** in the `Projects` panel.
3. Select **New → JFrame Form**.
4. Name it **`TicTacToe`**, and make sure the package is `com.example.library`.
5. Click **Finish**.

NetBeans will generate:
- `TicTacToe.java`
- `TicTacToe.form` (the GUI layout file)

---

## 🛠 **Step 2: Set Up the Layout**
1. **Click inside the form** to select it.
2. In the **Properties panel**, set:
   - **Layout Manager** → `BorderLayout`
   - **Title** → `Tic-Tac-Toe`
   - **Resizable** → `False`
   - **DefaultCloseOperation** → `EXIT_ON_CLOSE`
   - **Size** → `400 x 450` (or adjust later)

---

## 🔳 **Step 3: Add UI Components**
Now, we add **JPanels, JLabels, JButtons**, and arrange them correctly.

### **A) Add the Score and Turn Display**
1. **Drag a `JPanel`** from the Palette to the **top section** of the window.
   - In **Properties**, set **Layout** → `GridLayout(1, 3)`.
   - **Rename** the JPanel → `topPanel`.

2. **Inside `topPanel`, add:**
   - **`JLabel` (for Player 1's score)**
     - Rename it → `player1ScoreLabel`
     - **Set text** → `"Player 1: 0"`
     - **Alignment** → Left (`SwingConstants.LEFT`)
   - **`JLabel` (for turn display)**
     - Rename it → `turnLabel`
     - **Set text** → `"Turn: Player 1"`
     - **Alignment** → Center (`SwingConstants.CENTER`)
   - **`JLabel` (for Player 2's score)**
     - Rename it → `player2ScoreLabel`
     - **Set text** → `"Player 2: 0"`
     - **Alignment** → Right (`SwingConstants.RIGHT`)

---

### **B) Add the Game Board**
1. **Drag another `JPanel`** below `topPanel`.  
   - Set **Layout** → `GridLayout(3, 3)`
   - Rename it → `gamePanel`.

2. **Inside `gamePanel`, add 9 `JButton`s** (for the Tic-Tac-Toe grid):
   - Rename them as:
     ```
     button00, button01, button02
     button10, button11, button12
     button20, button21, button22
     ```
   - Set their **Font** → `"Arial", Bold, Size: 40`
   - Set their **Text** → `""` (leave blank)
   - Set their **Background Color** → `LIGHT_GRAY`

---

### **C) Add the Quit Button**
1. **Drag a `JButton`** to the bottom section of the form.
   - Rename it → `quitButton`
   - **Set Text** → `"Quit"`
   - **Font** → `"Arial", Bold, Size: 18`
   - **Foreground Color** → `Red`
   - **Action** → Later, we’ll link it to `System.exit(0)`.

---

## 🔗 **Step 4: Link Components to `TicTacToe.java`**
1. **Right-click the form** in the Design View.
2. Click **Customize Code**.
3. **Change `private` to `public`** for:
   - `gamePanel`
   - `turnLabel`
   - `player1ScoreLabel`
   - `player2ScoreLabel`
   - `quitButton`
   - All 9 buttons (`button00` to `button22`)
   
**Why?** This allows `TicTacToe.java` to access these components.

---

## ⚡ **Step 5: Add Event Listeners**
### **A) Quit Button Action**
1. **Click the `quitButton` in the GUI.**
2. In **Properties**, go to **Events**.
3. Locate `actionPerformed` and click **[...]**.
4. Add this code inside the auto-generated method:
   ```java
   private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {
       System.exit(0); // Closes the application
   }
   ```

---

## 🚀 **Final Step: Save & Run**
- **Press `Ctrl + S`** to save.
- Click **Run** ▶️ to test.

🎉 **Now your Tic-Tac-Toe form is fully designed!**  
Let me know if you need any refinements. 🚀