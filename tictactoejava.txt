package com.example.library;

import javax.swing.*;
import java.awt.*;

/**
 * TicTacToe game using Java Swing.
 * - Human vs Human mode
 * - Players enter their names
 * - Displays current player's turn
 * - Tracks and updates score
 * - Alternating starting player each round
 * - Displays win/draw message
 */
public class TicTacToe extends javax.swing.JFrame {

    private String player1Name, player2Name;  // Stores player names
    private String currentPlayer;             // Tracks whose turn it is
    private int player1Score = 0, player2Score = 0;  // Score tracking
    private JButton[][] buttons;  // Grid for Tic-Tac-Toe board
    private int turnCount = 0;     // Counts moves for draw detection

    public TicTacToe() {
        initComponents();
        initializeGame();
    }

    /**
     * Initializes the game, setting player names and resetting the board.
     */
    private void initializeGame() {
        // Get player names via input dialogs
        player1Name = JOptionPane.showInputDialog(this, "Enter name for Player 1 (X):");
        player2Name = JOptionPane.showInputDialog(this, "Enter name for Player 2 (O):");

        // Ensure names are not empty
        if (player1Name == null || player1Name.trim().isEmpty()) player1Name = "Player 1";
        if (player2Name == null || player2Name.trim().isEmpty()) player2Name = "Player 2";

        // Assign starting player (alternates after each round)
        currentPlayer = (Math.random() < 0.5) ? player1Name : player2Name;
        updateTurnLabel();

        // Initialize the 3x3 button grid (assuming TicTacToe.form contains a JPanel named gamePanel)
        buttons = new JButton[3][3];

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                JButton btn = new JButton("");
                btn.setFont(new Font("Arial", Font.BOLD, 40));
                btn.setFocusPainted(false);
                btn.setBackground(Color.LIGHT_GRAY);
                btn.addActionListener(e -> buttonClicked(btn));
                gamePanel.add(btn);
                buttons[i][j] = btn;
            }
        }

        gamePanel.revalidate();
        gamePanel.repaint();
    }

    /**
     * Handles button click events on the Tic-Tac-Toe grid.
     */
    private void buttonClicked(JButton btn) {
        if (!btn.getText().equals("")) return;  // Ignore if already clicked

        // Set symbol based on current player
        String symbol = currentPlayer.equals(player1Name) ? "X" : "O";
        btn.setText(symbol);

        // Set button color
        btn.setForeground(symbol.equals("X") ? Color.BLUE : Color.RED);

        turnCount++;  // Increment turn count

        // Check for win or draw
        if (checkWin(symbol)) {
            if (symbol.equals("X")) player1Score++;
            else player2Score++;

            JOptionPane.showMessageDialog(this, currentPlayer + " wins!");
            updateScore();
            resetBoard();
        } else if (turnCount == 9) {
            JOptionPane.showMessageDialog(this, "It's a draw!");
            resetBoard();
        } else {
            switchPlayer();
            updateTurnLabel();
        }
    }

    /**
     * Switches the current player.
     */
    private void switchPlayer() {
        currentPlayer = currentPlayer.equals(player1Name) ? player2Name : player1Name;
    }

    /**
     * Updates the label showing the current player's turn.
     */
    private void updateTurnLabel() {
        turnLabel.setText("Turn: " + currentPlayer);
    }

    /**
     * Updates the scoreboard labels.
     */
    private void updateScore() {
        player1ScoreLabel.setText(player1Name + ": " + player1Score);
        player2ScoreLabel.setText(player2Name + ": " + player2Score);
    }

    /**
     * Checks if the given symbol (X or O) has won.
     */
    private boolean checkWin(String symbol) {
        // Check rows, columns, and diagonals
        return (checkLine(0, 0, 0, 1, 0, 2, symbol) ||  // Row 1
                checkLine(1, 0, 1, 1, 1, 2, symbol) ||  // Row 2
                checkLine(2, 0, 2, 1, 2, 2, symbol) ||  // Row 3
                checkLine(0, 0, 1, 0, 2, 0, symbol) ||  // Column 1
                checkLine(0, 1, 1, 1, 2, 1, symbol) ||  // Column 2
                checkLine(0, 2, 1, 2, 2, 2, symbol) ||  // Column 3
                checkLine(0, 0, 1, 1, 2, 2, symbol) ||  // Diagonal \
                checkLine(0, 2, 1, 1, 2, 0, symbol));   // Diagonal /
    }

    /**
     * Checks if three specific buttons contain the same symbol (win condition).
     */
    private boolean checkLine(int r1, int c1, int r2, int c2, int r3, int c3, String symbol) {
        return buttons[r1][c1].getText().equals(symbol) &&
               buttons[r2][c2].getText().equals(symbol) &&
               buttons[r3][c3].getText().equals(symbol);
    }

    /**
     * Resets the game board for a new round.
     */
    private void resetBoard() {
        for (JButton[] row : buttons) {
            for (JButton btn : row) {
                btn.setText("");
                btn.setBackground(Color.LIGHT_GRAY);
            }
        }
        turnCount = 0;
        switchPlayer(); // Alternate who starts next round
        updateTurnLabel();
    }

    /**
     * Exits the application.
     */
    private void quitGame() {
        System.exit(0);
    }

    /**
     * Auto-generated UI setup method from NetBeans GUI builder.
     */
    private void initComponents() {
        gamePanel = new JPanel(new GridLayout(3, 3));
        turnLabel = new JLabel("Turn: ", SwingConstants.CENTER);
        player1ScoreLabel = new JLabel("", SwingConstants.LEFT);
        player2ScoreLabel = new JLabel("", SwingConstants.RIGHT);
        JButton quitButton = new JButton("Quit");

        quitButton.addActionListener(e -> quitGame());

        JPanel topPanel = new JPanel(new GridLayout(1, 3));
        topPanel.add(player1ScoreLabel);
        topPanel.add(turnLabel);
        topPanel.add(player2ScoreLabel);

        setLayout(new BorderLayout());
        add(topPanel, BorderLayout.NORTH);
        add(gamePanel, BorderLayout.CENTER);
        add(quitButton, BorderLayout.SOUTH);

        setTitle("Tic-Tac-Toe");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 450);
        setVisible(true);
    }

    public static void main(String[] args) {
        new TicTacToe();
    }

    // UI Components
    private JPanel gamePanel;
    private JLabel turnLabel, player1ScoreLabel, player2ScoreLabel;
}
